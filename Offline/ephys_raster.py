# -*- coding: utf-8 -*-
"""
Created on Fri May 10 16:24:55 2024

@author: Vitaly
"""
import pandas as pd
import numpy as np

#graphical pachages for debugging, commented out when not in debugging mode
#from bokeh.plotting import figure as bk_figure, output_file as bk_output_file, save as bk_save, show as bk_show
#from PIL import Image as im 


class vision_spikes:
    
    
    paths=None
    trials=None
    meta=None
    
    spike_times=None
    spike_clusters=None
    cluser_group=None
    
    tempo_vars=None
    
    def __init__(self,meta:dict,paths:dict):
        self.paths=paths
        self.meta=meta
        self.paths['py_tempo']='tempo_py_LUT.xls'
        self.paths['Trials']=paths['kilosort']+'/Trials.csv'
        self.paths['log']=paths['tempo']+f'/m{meta["subject"]}c{meta["session"]}r{meta["recording"]}.log'
        self.paths['spike_times']       = paths['kilosort']+'/spike_times.npy'
        self.paths['spike_clusters']    = paths['kilosort']+'/spike_clusters.npy'
        self.paths['cluster_group'] = paths['kilosort']+'/cluster_group.tsv'
        
        self.trials=pd.read_csv(self.paths['Trials'])
        self.spike_times=np.load(self.paths['spike_times'])
        self.spike_clusters=np.load(self.paths['spike_clusters'])
        self.cluster_group=pd.read_csv(self.paths['cluster_group'],sep='\t')
        self.tempo_vars=pd.read_excel(self.paths['py_tempo'])

    def build_raster(self,unit:int):
        
        T=self.trials[(self.trials['rec']==self.meta['recording'])]
        trials=list(T['trial'])
        spk_sample=self.spike_times
        spk_unit  =self.spike_clusters
        #print (trials)
        filter_unit=spk_unit==unit
        raster=[]
        for trial in trials:
            TT=T[T['trial']==trial].iloc[0]
            sample_0=TT['ap in stitch']
            sample_start=sample_0-self.meta['pre']*self.meta['sampling_rate']
            sample_end=  sample_0+self.meta['post']*self.meta['sampling_rate']
            filter_spikes=(spk_sample>=sample_start) & (spk_sample<sample_end)
            filter_all=filter_spikes & filter_unit
            spikes_trial=spk_sample[filter_all]-sample_0
            raster+=[{'trial':trial,'spikes':spikes_trial*1.0/self.meta['sampling_rate']}]
        return raster
    def build_raster_matrix(self,unit:int):
        t_ms=np.arange(-self.meta['pre']*1000,self.meta['post']*1000)
        raster=self.build_raster(unit)
        trial_num=len(raster)
        M=np.zeros((trial_num,t_ms.size),dtype=bool)
        for r in raster:
            trial=r['trial']-1
            spikes=(np.array(r['spikes']*1000-self.meta['pre']*1000,dtype=float)).astype(np.int16)
            
            M[trial,spikes]=True
        return M
    
    def build_all(self):
        clas=self.cluster_group
        meta=self.meta
        MultiUnit=list(clas[clas['group']=='mua']['cluster_id'])
        SingleUnit=list(clas[clas['group']=='good']['cluster_id'])
        for unit in MultiUnit:
            raster=self.build_raster_matrix(unit)
            p=self.paths['output']+f'/m{meta["subject"]}c{meta["session"]}r{meta["recording"]}u{unit}_raster.npz'
            np.savez_compressed(p,raster=raster,meta=meta,group='MultiUnit')
        for unit in SingleUnit:
            raster=self.build_raster_matrix(unit)
            p=self.paths['output']+f'/m{meta["subject"]}c{meta["session"]}r{meta["recording"]}u{unit}_raster.npz'
            np.savez_compressed(p,raster=raster,meta=meta,group='SingleUnit')
            
    def build_conditions_table(self):
    #Extract the necessary information from .log file
    #generated by TEMPO
        logfile=self.paths['log']
        with open(logfile) as input_file:
            protocol_num = int ([next(input_file) for _ in range(5)][-1].split(' ')[1])
        tvars=self.tempo_vars[self.tempo_vars['protocol']==protocol_num]    
        
        if len(tvars)==0:
            print(f"no variables found in python_tempo_LUT.xls for protocol #{protocol_num}")
        
        condition_table={}
        for ivar in range(len(tvars)):
            tvar=tvars.iloc[ivar]
            #print (tvar)
            tvar_pystr=str(tvar['py_str'])
            tvar_str = str(tvar['tempo_str'])
            tvar_py_array=bool(tvar['py_array'])
            tvar_tempo_array=bool(tvar['tempo_array'])
            with open(self.paths['log'],'r') as f:
                lines = [ [float(s) for s in line.split(' ')[1:] if not len(s)==0] for line in f if line.split(' ')[0]==tvar_str]
            values=np.array(lines,dtype=np.float32)
            #print (values)
            if (~tvar_py_array) and tvar_tempo_array:
                values=values[:,0].squeeze()
            condition_table[tvar_pystr]=values
        condition_table['trials']=["" for v in values]
        condition_table=pd.DataFrame.from_dict(condition_table)
        unique_condition_table=condition_table.drop_duplicates()
       # print (unique_condition_table)
        py_vars=list(tvars['py_str'])
        for icond in range(len(unique_condition_table)):
            cond=unique_condition_table.iloc[icond]
            flt=[True for i in range(len(condition_table))]
            for py_var in py_vars:
                flt&=condition_table[py_var]==cond[py_var]
            #print (cond)
            
            #trials_condition=condition_table[flt]
            #print (trials_condition)
            flt=f"{list(np.where(flt)[0]+1)}"[1:-1]
            #cond['trials']=flt
            unique_condition_table.loc[icond,'trials']=flt
        unique_condition_table.sort_values(by=py_vars,inplace=True,ignore_index=True)
        self.condition_table=unique_condition_table
        



            
if __name__=="__main__":
    for rec in [1,2,3,4]:#range(1,7):
        m={}
        m['subject']=42
        m['session']=527
        m['recording']=rec
        m['sampling_rate']=30000
        m['pre']=1.5
        m['post']=3.5
        
        p={}
        
        p['kilosort']=f'C:/Sorting/m{m["subject"]}c{m["session"]}'
        p['tempo']='Z:/Data/MOOG/Dazs/TEMPO'
        p['output']=f'Z:/Data/MOOG/DAZS/OpenEphys/m{m["subject"]}c{m["session"]}/Spikes'
        
        vs=vision_spikes(m,p)
        vs.build_conditions_table()
        print (vs.condition_table)
        #vs.build_all()

        